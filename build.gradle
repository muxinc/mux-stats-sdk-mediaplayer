// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'

        classpath 'com.github.kezong:fat-aar:1.3.6'
        classpath 'com.novoda:bintray-release:0.9.1'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://muxinc.jfrog.io/artifactory/default-maven-release-local' }
    }

    project.ext {
        compileSdkVersion = 29
        minSdkVersion = 18
        targetSdkVersion = 29
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Local dev mode causes the modules to refer to MuxKalturaSDK directly
// When it's NOT set they will download aars from artifactory and use those
//
// It must be false for fat aar generation of MuxKalturaSDK to work
// This is a bug/problem with the fat aar mechanism
def inLocalDevModeFlag = true

// Version name
// This gets modified based on if we're a release or branch build
def packageVersionName = 'dev'

def artifactoryUsername = System.getenv('ORG_GRADLE_PROJECT_artifactory_user')
def artifactoryPassword = System.getenv('ORG_GRADLE_PROJECT_artifactory_password')

def signingKeyId = System.getenv('SIGNING_KEY_ID')
def signingPassword = System.getenv('SIGNING_PASSWORD')
def signingKey = System.getenv('SIGNING_KEY')

Properties properties = new Properties()
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
    artifactoryUsername = properties.getProperty('artifactory_user')
    artifactoryPassword = properties.getProperty('artifactory_password')
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def branch = System.getenv('BUILDKITE_BRANCH')

    if(branch == null || branch == "") {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'branch', '--show-current'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } else {
        return branch
    }
}

/*
We look for git commit messages starting with patterns like v5.3.5
Then we assume all commits like that on master are PRs that should result in releases of that version
*/
def getGitCommitMessageVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--pretty=%B'
        standardOutput = stdout
    }
    def msg = stdout.toString().trim()

    def matcher = msg=~ /v(\d+\.\d+\.\d+).*/
    if(matcher.find()) {
        def strippedVersion = matcher.group(1)
        return strippedVersion
    }
    return null
}

def gitHash = getGitHash()
def gitBranch = getGitBranch()
def gitCommitMessageVersion = getGitCommitMessageVersion()

def isAReleaseBuild = gitBranch == "master" && gitCommitMessageVersion != null

if(isAReleaseBuild) {
    packageVersionName = gitCommitMessageVersion
} else {
    packageVersionName = packageVersionName + "-" + gitBranch + "-" + gitHash
}

println("Evaluated building for version "+packageVersionName)

allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'maven-publish'

    repositories {
        google()
        jcenter()

        // Both our release and dev repos are imported
        maven {
            url 'https://muxinc.jfrog.io/artifactory/default-maven-release-local'
        }

        maven {
            url 'https://muxinc.jfrog.io/artifactory/default-maven-local'
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    project.ext {
        versionName = packageVersionName
        inLocalDevMode = inLocalDevModeFlag
    }
}

artifactory {
    contextUrl = "https://muxinc.jfrog.io/artifactory/"
    publish {
        repository {
            repoKey = 'default-maven-local'
            username = artifactoryUsername
            password = artifactoryPassword
            maven = true
        }
        defaults {
            publications ('mavenJava')

            // Need to list all the different variants here and in the deploy section below
            publications ('release')
        }
    }
    resolve {
        repository {
            repoKey = 'default-maven-local'
            username = artifactoryUsername
            password = artifactoryPassword
            maven = true
        }
    }
}

def deployVariant(String versionName) {
    println("Deploying "+versionName)
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'curl', '-u', "${artifactory_user}:${artifactory_password}", '-X', "POST", "https://muxinc.jfrog.io/artifactory/api/copy/default-maven-local/com/mux/stats/sdk/muxstats/MuxKalturaSDK/" + versionName + "?to=/default-maven-release-local/com/mux/stats/sdk/muxstats/MuxKalturaSDK/" + versionName
        standardOutput = stdout
    }
    def msg = stdout.toString()
    println(msg)
}

task muxReleaseDeploy {
    doLast {
        if(isAReleaseBuild) {
            println("Deploying from local maven to release maven")

            deployVariant(packageVersionName)

            println("Release deployment complete")
        } else {
            println("Not a release so no deployment")
        }
    }
}
